
//  1. Почему код дает именно такие результаты?
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 Префиксная запись. Снала инкрементирование, возвращается уже новое значение 
d = b++; alert(d);           // 1 Постфиксная запись. Снала возвращается значение, потом выполяется инкрементирование 
c = (2+ ++a); alert(c);      // 5 ++а равняется 3. Прибавляем 2
d = (2+ b++); alert(d);      // 4 b++ равняется 2.(сначалап возвращается потом увеличивается на 1  и будет рвняться 3) Прибавляем 2
alert(a);                    // 3 После всех операций "а" равнялась 3
alert(b);                    // 3 После всех операций "b" равнялась 3


// 2. Чему будет равен x? 
var a = 2;
var x = 1 + (a *= 2);
// x будет равен 5. 
// x = 1 + (2 * 2)
// x = 5 



/* 3. Объявить две целочисленные переменные — a и b и задать им произвольные начальные значения. 
Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму;
Ноль можно считать положительным числом.*/
var a = 3;
var b = 7;
if ((a >= 0) && (b >= 0)){ // если оба числа положительные
    // определим болшее число и вычтем из него меньшее
    if (a > b){
        alert(a - b);
    }
    else {
        alert(b - a);
    }  
} 
else if ((a < 0) && (b < 0)){ // если оба числа отрицательные
    alert(a * b);
}  
else { // в противном случаен одно число положительное другое отрицательное
    alert(a + b);
}



/* 4. Присвоить переменной а значение в промежутке [0..15]. 
С помощью оператора switch организовать вывод чисел от a до 15. */
var a = 12;
switch (a){
    case 1:
        alert(1);
    case 2:
        alert(2);
    case 3:
        alert(3);
    case 4:
        alert(4);
    case 5:
        alert(5);
    case 6:
        alert(6);
    case 7:
        alert(7);
    case 8:
        alert(8);
    case 9:
        alert(9);
    case 10:
        alert(10);
    case 11:
        alert(11);
    case 12:
        alert(12);
    case 13:
        alert(13);  
    case 14:
        alert(14);  
    case 15:
        alert(15);  
        break;
    default:
        alert("Число задано неверно");
}




/* 5. Реализовать четыре основные арифметические операции в виде функций с двумя параметрами. 
Обязательно использовать оператор return.*/
// сложение
function addition(a,b){
    return a + b;
}
// вычитание
function subtraction(a,b){
    return a - b;
}
// умножение
function multiply(a,b){
    return a * b;
}
// деление
function division(a,b){
    return a / b;
}



/* 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
где arg1, arg2 — значения аргументов, operation — строка с названием операции. 
В зависимости от переданного значения выполнить одну из арифметических операций 
(использовать функции из пункта 5) и вернуть полученное значение (применить switch).*/

// operation может принимать следующие значения: "+", "-", "*", "/"
function mathOperation(arg1, arg2, operation){
    switch(operation){
        case "+":
            return(addition(arg1,arg2));
        case "-":
            return(subtraction(arg1,arg2));
        case "*":
            return(multiply(arg1,arg2));
        case "/":
            return(division(arg1,arg2));
    }
}
alert(mathOperation(2,3,"+"));


// 7. * Сравнить null и 0. Объяснить результат.

// Ответ
//alert( null > 0 ); // false
//alert( null == 0 ); // false
//alert( null >= 0); // true
// алгоритмы проверки равенства == и сравнения >= > < <= работают по-разному.
// Сравнение приводит null к числу, получается ноль. 
// А при проверке равенства значения null и undefined обрабатываются особым образом: 
// они равны друг другу, но не равны чему-то ещё.



// 8.* С помощью рекурсии организовать функцию возведения числа в степень. 
// Формат: function power(val, pow), где val — заданное число, pow –— степень.
function power(val, pow){
    if (pow == 0){
        return(1);
    }
    else if (pow == 1){
        return(val);
    }
    else if (pow > 1){
        return(val * power(val,pow-1));
    }
}
    alert(power(2,3))
